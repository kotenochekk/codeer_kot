#meta developer: @codeer_kot
# –Ω–µ –º–µ–Ω—è–π—Ç–µ –º–æ–π –∫–æ–¥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∑—ã–≤–∞—è —á—Ç–æ –≤—ã —Å–æ–∑–¥–∞—Ç–µ–ª—å –º–æ–¥—É–ª—è.

from .. import loader, utils
import asyncio
import re
from datetime import datetime, timedelta

class KOTIrisTradeModule(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –ò—Ä–∏—Å-–±–∏—Ä–∂–µ"""
    strings = {"name": "KOTIrisTrade"}

    async def client_ready(self, client, db):
        self.client = client
        self.running = False
        self.db = db
        self.current_sell_price = None
        self.current_buy_price = None
        self.waiting_for_notification = False

    async def —Ç—Ä–¥cmd(self, message):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å"""
        self.running = True
        target_user_id = 5443619563
        await message.edit("üèÅ –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞.")
        
        while self.running:
            try:
                if self.waiting_for_notification:
                    await asyncio.sleep(3)
                    continue

                await asyncio.sleep(3)
                response = await self.check_exchange(target_user_id)
                if response:
                    min_sell, max_buy = self.parse_exchange_data(response)
                    if min_sell is not None and max_buy is not None:
                        if self.current_sell_price and min_sell < self.current_sell_price:
                            await asyncio.sleep(3)
                            await self.client.send_message(target_user_id, ".–±–∏—Ä–∂–∞ –æ—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ")
                            await asyncio.sleep(3)
                            self.current_sell_price = None
                            self.current_buy_price = None

                        if self.current_buy_price and max_buy > self.current_buy_price:
                            await asyncio.sleep(3)
                            await self.client.send_message(target_user_id, ".–±–∏—Ä–∂–∞ –æ—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ")
                            await asyncio.sleep(3)
                            self.current_sell_price = None
                            self.current_buy_price = None

                        if not self.current_sell_price:
                            await asyncio.sleep(3)
                            new_sell_price = round(min_sell - 0.01, 2)
                            response = await self.send_trade_command(target_user_id, "–ø—Ä–æ–¥–∞—Ç—å", 999, new_sell_price)
                            if response and "–í –º–µ—à–∫–µ –Ω–µ—Ç –∑–æ–ª–æ—Ç—ã—Ö –º–∞–Ω–¥–∞—Ä–∏–Ω–æ–∫" not in response.message:
                                if "‚öñÔ∏è –ò—Ä–∏—Å-–±–∏—Ä–∂–∞. –ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –æ—Ç" in response.message:
                                    self.waiting_for_notification = True
                                    self.current_sell_price = new_sell_price
                                    continue

                        if not self.current_buy_price:
                            await asyncio.sleep(3)
                            new_buy_price = round(max_buy + 0.01, 2)
                            response = await self.send_trade_command(target_user_id, "–∫—É–ø–∏—Ç—å", 999, new_buy_price)
                            if response and "–ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å –∑–æ–ª–æ—Ç—ã–µ –º–∞–Ω–¥–∞—Ä–∏–Ω–∫–∏" not in response.message:
                                if "‚öñÔ∏è –ò—Ä–∏—Å-–±–∏—Ä–∂–∞. –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –æ—Ç" in response.message:
                                    self.waiting_for_notification = True
                                    self.current_buy_price = new_buy_price
                                    continue

                await asyncio.sleep(3)
                
            except Exception as e:
                await message.edit(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                await asyncio.sleep(3)

    async def —Å—Ç—Ä–¥cmd(self, message):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å"""
        self.running = False
        self.current_sell_price = None
        self.current_buy_price = None
        self.waiting_for_notification = False
        await message.edit("üõë –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

    async def check_exchange(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏—Ä–∂–∏"""
        try:
            async with self.client.conversation(user_id, timeout=30) as conv:
                await conv.send_message("–±–∏—Ä–∂–∞")
                response = await conv.get_response()
                return response
        except asyncio.TimeoutError:
            return None

    async def send_trade_command(self, user_id, action, amount, price):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        try:
            async with self.client.conversation(user_id, timeout=30) as conv:
                command = f".–±–∏—Ä–∂–∞ {action} {amount} {price:.2f}"
                await conv.send_message(command)
                response = await conv.get_response()
                return response
        except asyncio.TimeoutError:
            return None

    def parse_exchange_data(self, message):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –±–∏—Ä–∂–∏"""
        text = message.message
        text = text.replace(',', '.').replace('\xa0', ' ')

        sell_section = re.search(r"üîΩ –ó–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É([\s\S]*?)üîº –ó–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É", text)
        buy_section = re.search(r"üîº –ó–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É([\s\S]*)", text)

        min_sell = None
        max_buy = None

        if sell_section:
            sell_prices = re.findall(r"(\d+\.\d+) –º–∞–Ω–¥–∞—Ä–∏–Ω–æ–∫ \|\s*\d+\s+–≥–æ–ª–¥", sell_section.group(1))
            sell_prices = [float(price) for price in sell_prices]
            if sell_prices:
                min_sell = min(sell_prices)

        if buy_section:
            buy_prices = re.findall(r"(\d+\.\d+) –º–∞–Ω–¥–∞—Ä–∏–Ω–æ–∫ \|\s*\d+\s+–≥–æ–ª–¥", buy_section.group(1))
            buy_prices = [float(price) for price in buy_prices]
            if buy_prices:
                max_buy = max(buy_prices)

        return min_sell, max_buy

    async def watcher(self, message):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–∫—É–ø–∫–µ/–ø—Ä–æ–¥–∞–∂–µ"""
        if not self.running:
            return
            
        if message.sender_id == 5443619563:
            if "‚öñÔ∏è –ò—Ä–∏—Å-–±–∏—Ä–∂–∞. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ" in message.text:
                self.waiting_for_notification = False
                self.current_sell_price = None
                self.current_buy_price = None
                await asyncio.sleep(3)
                await self.check_exchange(5443619563)
